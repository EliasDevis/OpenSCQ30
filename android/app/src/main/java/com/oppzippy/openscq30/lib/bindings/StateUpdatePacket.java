// Automatically generated by flapigen
package com.oppzippy.openscq30.lib.bindings;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class StateUpdatePacket {
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof StateUpdatePacket)
            return ((StateUpdatePacket)obj).rustEq(this);
        return false;
    }


    private final boolean rustEq(@NonNull StateUpdatePacket other) {
        long a0 = other.mNativeObj;
        boolean ret = do_rustEq(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(other);

        return ret;
    }
    private static native boolean do_rustEq(long self, long other);

    public StateUpdatePacket() throws Exception {
        mNativeObj = init();
    }
    private static native long init() throws Exception;

    public final @NonNull DeviceProfile deviceProfile() {
        long ret = do_deviceProfile(mNativeObj);
        DeviceProfile convRet = new DeviceProfile(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_deviceProfile(long self);

    public final @NonNull java.util.Optional<SoundModes> soundModes() {
        long ret = do_soundModes(mNativeObj);
        java.util.Optional<SoundModes> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new SoundModes(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_soundModes(long self);

    public final @NonNull EqualizerConfiguration equalizerConfiguration() {
        long ret = do_equalizerConfiguration(mNativeObj);
        EqualizerConfiguration convRet = new EqualizerConfiguration(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_equalizerConfiguration(long self);

    public final @NonNull java.util.Optional<FirmwareVersion> firmwareVersion() {
        long ret = do_firmwareVersion(mNativeObj);
        java.util.Optional<FirmwareVersion> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new FirmwareVersion(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_firmwareVersion(long self);

    public final @NonNull java.util.Optional<String> serialNumber() {
        String ret = do_serialNumber(mNativeObj);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native @Nullable String do_serialNumber(long self);

    public final @NonNull java.util.Optional<AgeRange> ageRange() {
        long ret = do_ageRange(mNativeObj);
        java.util.Optional<AgeRange> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new AgeRange(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_ageRange(long self);

    public final @NonNull java.util.Optional<CustomHearId> customHearId() {
        long ret = do_customHearId(mNativeObj);
        java.util.Optional<CustomHearId> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new CustomHearId(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_customHearId(long self);

    public final @NonNull java.util.Optional<Gender> gender() {
        long ret = do_gender(mNativeObj);
        java.util.Optional<Gender> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new Gender(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_gender(long self);

    public final boolean isLeftBatteryCharging() {
        boolean ret = do_isLeftBatteryCharging(mNativeObj);

        return ret;
    }
    private static native boolean do_isLeftBatteryCharging(long self);

    public final boolean isRightBatteryCharging() {
        boolean ret = do_isRightBatteryCharging(mNativeObj);

        return ret;
    }
    private static native boolean do_isRightBatteryCharging(long self);

    public final short leftBatteryLevel() {
        short ret = do_leftBatteryLevel(mNativeObj);

        return ret;
    }
    private static native short do_leftBatteryLevel(long self);

    public final short rightBatteryLevel() {
        short ret = do_rightBatteryLevel(mNativeObj);

        return ret;
    }
    private static native short do_rightBatteryLevel(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ StateUpdatePacket(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}