// Automatically generated by flapigen
package com.oppzippy.openscq30.libbindings;
import androidx.annotation.NonNull;

public final class InboundPacket {

    public InboundPacket(@NonNull byte [] input) throws Exception {
        mNativeObj = init(input);
    }
    private static native long init(byte [] input) throws Exception;

    public final @NonNull java.util.Optional<SoundModeUpdatePacket> soundModeUpdate() {
        long ret = do_soundModeUpdate(mNativeObj);
        java.util.Optional<SoundModeUpdatePacket> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new SoundModeUpdatePacket(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_soundModeUpdate(long self);

    public final @NonNull java.util.Optional<SetSoundModeOkPacket> setSoundModeOk() {
        long ret = do_setSoundModeOk(mNativeObj);
        java.util.Optional<SetSoundModeOkPacket> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new SetSoundModeOkPacket(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_setSoundModeOk(long self);

    public final @NonNull java.util.Optional<SetEqualizerOkPacket> setEqualizerOk() {
        long ret = do_setEqualizerOk(mNativeObj);
        java.util.Optional<SetEqualizerOkPacket> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new SetEqualizerOkPacket(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_setEqualizerOk(long self);

    public final @NonNull java.util.Optional<StateUpdatePacket> stateUpdate() {
        long ret = do_stateUpdate(mNativeObj);
        java.util.Optional<StateUpdatePacket> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new StateUpdatePacket(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_stateUpdate(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ InboundPacket(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}