// Automatically generated by flapigen
package com.oppzippy.openscq30.lib.bindings;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class DeviceProfile {
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof DeviceProfile)
            return ((DeviceProfile)obj).rustEq(this);
        return false;
    }


    private final boolean rustEq(@NonNull DeviceProfile other) {
        long a0 = other.mNativeObj;
        boolean ret = do_rustEq(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(other);

        return ret;
    }
    private static native boolean do_rustEq(long self, long other);

    public DeviceProfile(@Nullable SoundModeProfile sound_mode, boolean has_hear_id, long num_equalizer_channels, long num_equalizer_bands, boolean has_dynamic_range_compression, boolean has_custom_button_model, boolean has_wear_detection, boolean has_touch_tone, boolean has_auto_power_off, @Nullable FirmwareVersion dynamic_range_compression_min_firmware_version) {
        long a0 = 0;//TODO: use ptr::null() for corresponding constant
        if (sound_mode != null) {
            a0 = sound_mode.mNativeObj;
            sound_mode.mNativeObj = 0;
        }

        long a9 = 0;//TODO: use ptr::null() for corresponding constant
        if (dynamic_range_compression_min_firmware_version != null) {
            a9 = dynamic_range_compression_min_firmware_version.mNativeObj;
            dynamic_range_compression_min_firmware_version.mNativeObj = 0;
        }

        mNativeObj = init(a0, has_hear_id, num_equalizer_channels, num_equalizer_bands, has_dynamic_range_compression, has_custom_button_model, has_wear_detection, has_touch_tone, has_auto_power_off, a9);
        JNIReachabilityFence.reachabilityFence2(sound_mode, dynamic_range_compression_min_firmware_version);
    }
    private static native long init(long sound_mode, boolean has_hear_id, long num_equalizer_channels, long num_equalizer_bands, boolean has_dynamic_range_compression, boolean has_custom_button_model, boolean has_wear_detection, boolean has_touch_tone, boolean has_auto_power_off, long dynamic_range_compression_min_firmware_version);

    public final @NonNull java.util.Optional<SoundModeProfile> soundMode() {
        long ret = do_soundMode(mNativeObj);
        java.util.Optional<SoundModeProfile> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new SoundModeProfile(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_soundMode(long self);

    public final boolean hasHearId() {
        boolean ret = do_hasHearId(mNativeObj);

        return ret;
    }
    private static native boolean do_hasHearId(long self);

    public final long numEqualizerChannels() {
        long ret = do_numEqualizerChannels(mNativeObj);

        return ret;
    }
    private static native long do_numEqualizerChannels(long self);

    public final long numEqualizerBands() {
        long ret = do_numEqualizerBands(mNativeObj);

        return ret;
    }
    private static native long do_numEqualizerBands(long self);

    public final boolean hasDynamicRangeCompression() {
        boolean ret = do_hasDynamicRangeCompression(mNativeObj);

        return ret;
    }
    private static native boolean do_hasDynamicRangeCompression(long self);

    public final boolean hasCustomButtonModel() {
        boolean ret = do_hasCustomButtonModel(mNativeObj);

        return ret;
    }
    private static native boolean do_hasCustomButtonModel(long self);

    public final boolean hasWearDetection() {
        boolean ret = do_hasWearDetection(mNativeObj);

        return ret;
    }
    private static native boolean do_hasWearDetection(long self);

    public final boolean hasTouchTone() {
        boolean ret = do_hasTouchTone(mNativeObj);

        return ret;
    }
    private static native boolean do_hasTouchTone(long self);

    public final boolean hasAutoPowerOff() {
        boolean ret = do_hasAutoPowerOff(mNativeObj);

        return ret;
    }
    private static native boolean do_hasAutoPowerOff(long self);

    public final @NonNull java.util.Optional<FirmwareVersion> dynamicRangeCompressionMinFirmwareVersion() {
        long ret = do_dynamicRangeCompressionMinFirmwareVersion(mNativeObj);
        java.util.Optional<FirmwareVersion> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new FirmwareVersion(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_dynamicRangeCompressionMinFirmwareVersion(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ DeviceProfile(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}