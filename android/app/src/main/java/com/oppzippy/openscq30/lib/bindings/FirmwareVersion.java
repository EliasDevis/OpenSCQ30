// Automatically generated by flapigen
package com.oppzippy.openscq30.lib.bindings;
import androidx.annotation.NonNull;

public final class FirmwareVersion {
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof FirmwareVersion)
            return ((FirmwareVersion)obj).rustEq(this);
        return false;
    }


    private final boolean rustEq(@NonNull FirmwareVersion other) {
        long a0 = other.mNativeObj;
        boolean ret = do_rustEq(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(other);

        return ret;
    }
    private static native boolean do_rustEq(long self, long other);

    public FirmwareVersion(short major, short minor) {
        mNativeObj = init(major, minor);
    }
    private static native long init(short major, short minor);

    public final short major() {
        short ret = do_major(mNativeObj);

        return ret;
    }
    private static native short do_major(long self);

    public final short minor() {
        short ret = do_minor(mNativeObj);

        return ret;
    }
    private static native short do_minor(long self);

    public final int number() {
        int ret = do_number(mNativeObj);

        return ret;
    }
    private static native int do_number(long self);

    public final @NonNull String toString() {
        String ret = do_toString(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_toString(long self);

    public final int compare(@NonNull FirmwareVersion other) {
        long a0 = other.mNativeObj;
        int ret = do_compare(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(other);

        return ret;
    }
    private static native int do_compare(long self, long other);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ FirmwareVersion(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}