//Automatically generated by rifgen
use crate::*;
use jni_sys::*;
foreign_enum!(
	enum AmbientSoundMode {
		NoiseCanceling = AmbientSoundMode::NoiseCanceling,
		Transparency = AmbientSoundMode::Transparency,
		Normal = AmbientSoundMode::Normal,
	}
);
foreign_enum!(
	enum PresetEqualizerProfile {
		SoundcoreSignature = PresetEqualizerProfile::SoundcoreSignature,
		Acoustic = PresetEqualizerProfile::Acoustic,
		BassBooster = PresetEqualizerProfile::BassBooster,
		BassReducer = PresetEqualizerProfile::BassReducer,
		Classical = PresetEqualizerProfile::Classical,
		Podcast = PresetEqualizerProfile::Podcast,
		Dance = PresetEqualizerProfile::Dance,
		Deep = PresetEqualizerProfile::Deep,
		Electronic = PresetEqualizerProfile::Electronic,
		Flat = PresetEqualizerProfile::Flat,
		HipHop = PresetEqualizerProfile::HipHop,
		Jazz = PresetEqualizerProfile::Jazz,
		Latin = PresetEqualizerProfile::Latin,
		Lounge = PresetEqualizerProfile::Lounge,
		Piano = PresetEqualizerProfile::Piano,
		Pop = PresetEqualizerProfile::Pop,
		RnB = PresetEqualizerProfile::RnB,
		Rock = PresetEqualizerProfile::Rock,
		SmallSpeakers = PresetEqualizerProfile::SmallSpeakers,
		SpokenWord = PresetEqualizerProfile::SpokenWord,
		TrebleBooster = PresetEqualizerProfile::TrebleBooster,
		TrebleReducer = PresetEqualizerProfile::TrebleReducer,
	}
);
foreign_enum!(
	enum NoiseCancelingMode {
		Transport = NoiseCancelingMode::Transport,
		Outdoor = NoiseCancelingMode::Outdoor,
		Indoor = NoiseCancelingMode::Indoor,
	}
);
foreign_class!(
	class Init {
		fn Init::logging(); alias logging;
	}
);
foreign_class!(
	class EqualizerBandOffsets {
		self_type EqualizerBandOffsets;
		constructor EqualizerBandOffsets::new(volume_offsets : & [i8])->EqualizerBandOffsets;
		fn EqualizerBandOffsets::volume_offsets(& self)->Vec<i8>; alias volumeOffsets;
	}
);
foreign_class!(
	class EqualizerConfiguration {
		self_type EqualizerConfiguration;
		constructor EqualizerConfiguration::new_from_preset_profile(preset_profile : PresetEqualizerProfile ,)->EqualizerConfiguration;
		constructor EqualizerConfiguration::new_custom_profile(band_offsets : EqualizerBandOffsets)->EqualizerConfiguration;
		fn EqualizerConfiguration::profile_id(& self)->u16; alias profileId;
		fn EqualizerConfiguration::band_offsets(& self)->EqualizerBandOffsets; alias bandOffsets;
	}
);
foreign_class!(
	class SoundcoreDevice {
		self_type SoundcoreDevice;
		constructor SoundcoreDevice::_new()->SoundcoreDevice;
		fn SoundcoreDevice::mac_address(& self)->Result<String,String>; alias macAddress;
		fn SoundcoreDevice::name(& self)->Result<String,String>; alias name;
		fn SoundcoreDevice::ambient_sound_mode(& self)->AmbientSoundMode; alias ambientSoundMode;
		fn SoundcoreDevice::set_ambient_sound_mode(& self , ambient_sound_mode : AmbientSoundMode ,)->Result<(),String>; alias setAmbientSoundMode;
		fn SoundcoreDevice::noise_canceling_mode(& self)->NoiseCancelingMode; alias noiseCancelingMode;
		fn SoundcoreDevice::set_noise_canceling_mode(& self , noise_canceling_mode : NoiseCancelingMode ,)->Result<(),String>; alias setNoiseCancelingMode;
		fn SoundcoreDevice::equalizer_configuration(& self)->EqualizerConfiguration; alias equalizerConfiguration;
		fn SoundcoreDevice::set_equalizer_configuration(& self , configuration : EqualizerConfiguration ,)->Result<(),String>; alias setEqualizerConfiguration;
	}
);
foreign_class!(
	class SoundcoreDeviceRegistry {
		self_type SoundcoreDeviceRegistry;
		constructor SoundcoreDeviceRegistry::new()->SoundcoreDeviceRegistry;
		fn SoundcoreDeviceRegistry::refresh_devices(& self)->Result<(),String>; alias refreshDevices;
		fn SoundcoreDeviceRegistry::devices(& self)->Vec<SoundcoreDevice>; alias devices;
	}
);
