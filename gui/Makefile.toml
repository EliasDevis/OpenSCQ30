extend = "../Makefile.toml"

[tasks.build]
script_runner = "@duckscript"
script.main = '''
cm_run_task build-bin
cm_run_task build-locale
'''

[tasks.build-bin]
private = true
command = "cargo"
args = ["build", "@@split(OPENSCQ30_BUILD_FLAGS, )"]

[tasks.build-locale]
private = true
script_runner = "@duckscript"
condition = { files_modified = { input = [
    "./po/**/*",
    "Makefile.toml",
], output = [
    "${OPENSCQ30_BUILD_DIR}/share/**/*",
] } }
script = '''
project_name = set com.oppzippy.OpenSCQ30
out_dir = set ${OPENSCQ30_BUILD_DIR}

echo "Building en"
mkdir ${OPENSCQ30_BUILD_DIR}/share/locale/en/LC_MESSAGES
exec msgfmt --output-file ${OPENSCQ30_BUILD_DIR}/share/locale/en/LC_MESSAGES/${project_name}.mo ${CARGO_MAKE_WORKING_DIRECTORY}/po/${project_name}.pot

paths = glob_array ${CARGO_MAKE_WORKING_DIRECTORY}/po/*
for path in ${paths}
    if is_dir ${path}
        locale = basename ${path}
        echo Building ${locale}
        mkdir ${OPENSCQ30_BUILD_DIR}/share/locale/${locale}/LC_MESSAGES
        exec msgfmt --output-file ${OPENSCQ30_BUILD_DIR}/share/locale/${locale}/LC_MESSAGES/${project_name}.mo ${CARGO_MAKE_WORKING_DIRECTORY}/po/${locale}/${project_name}.po
    end
end
'''

[tasks.unit-test]
command = "cargo"
env.LC_ALL = "C"
env.LANG = "C"
args = ["test", "--bins"]

[tasks.unit-test-cov]
command = "cargo"
args = ["llvm-cov", "--no-report", "--bins"]

[tasks.install]
script_runner = "@duckscript"
script.main = '''
os = os_family
is_windows = eq ${os} windows
if ${is_windows}
    bin_name = set openscq30_gui.exe
else
    bin_name = set openscq30_gui
end
bin_path = set ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/release/${bin_name}

is_bin_built = is_file ${bin_path}
is_locale_built = is_dir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/release/share

if not ${is_bin_built} and ${is_locale_built}
    echo Run `cargo make --profile release build` before installing.
    exit 1
end

echo Installing to ${INSTALL_PREFIX}

echo Installing bin
cp ${bin_path} ${INSTALL_PREFIX}/bin/${bin_name}
if not ${is_windows}
    chmod 755 ${INSTALL_PREFIX}/bin/${bin_name}
end

echo Installing locales
cp_glob ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/release/share/**/* ${INSTALL_PREFIX}/share/

echo Installing icon
cp ${CARGO_MAKE_WORKING_DIRECTORY}/resources/com.oppzippy.OpenSCQ30.svg ${INSTALL_PREFIX}/share/icons/hicolor/scalable/apps/com.oppzippy.OpenSCQ30.svg

echo Installing desktop file
cp ${CARGO_MAKE_WORKING_DIRECTORY}/resources/com.oppzippy.OpenSCQ30.desktop ${INSTALL_PREFIX}/share/applications/com.oppzippy.OpenSCQ30.desktop

echo Installing AppStream Catalog XML
cp ${CARGO_MAKE_WORKING_DIRECTORY}/resources/com.oppzippy.OpenSCQ30.metainfo.xml ${INSTALL_PREFIX}/share/metainfo/com.oppzippy.OpenSCQ30.metainfo.xml
'''

[tasks.uninstall]
script.main = '''
os = os_family
is_windows = eq ${os} windows
if ${is_windows}
    bin_name = set "openscq30_gui.exe"
else
    bin_name = set "openscq30_gui"
end

echo Removing binary
rm ${INSTALL_PREFIX}/bin/${bin_name}

echo Removing locales
mo_files = glob_array ${INSTALL_PREFIX}/share/locale/*/LC_MESSAGES/com.oppzippy.OpenSCQ30.mo
for path in ${mo_files}
    rm ${path}
end

echo Removing icon
rm ${INSTALL_PREFIX}/share/icons/hicolor/scalable/apps/com.oppzippy.OpenSCQ30.svg

echo Removing desktop file
rm ${INSTALL_PREFIX}/share/applications/com.oppzippy.OpenSCQ30.desktop

echo Removing AppStream Catalog XML
rm ${INSTALL_PREFIX}/share/metainfo/com.oppzippy.OpenSCQ30.metainfo.xml
'''

[tasks.update-po-files]
script_runner = "@duckscript"
script = '''

project_name = set com.oppzippy.OpenSCQ30

echo Generating template
if is_file ./po/${project_name}.pot
    exec xgettext --files-from ./po/POTFILES.in --join-existing --add-comments --sort-output --output ./po/${project_name}.pot
else
    exec xgettext --files-from ./po/POTFILES.in --add-comments --sort-output --output ./po/${project_name}.pot
end

content = readfile ./po/LINGUAS
locales = split ${content} \n

for locale in ${locales}
    is_locale_empty = is_empty ${locale}
    if not ${is_locale_empty}
        echo "Updating ${locale}"
        mkdir ./po/${locale}
        if is_file ./po/${locale}/${project_name}.po
            exec msgmerge --update ./po/${locale}/${project_name}.po ./po/${project_name}.pot
        else
            exec msginit --input ./po/${project_name}.pot --locale ${locale} --output ./po/${locale}/${project_name}.po
        end
    end
end
'''
